{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","handleClick","evt","_this","props","flipCellsAroundMe","coord","classes","this","isLit","react_default","a","createElement","className","onClick","Component","Board","state","board","createBoard","hasWon","flipCellsAround","_this$props","ncols","nrows","_this$state","_coord$split$map","split","map","Number","_coord$split$map2","Object","slicedToArray","y","x","forEach","_ref","_ref2","every","row","cell","setState","_this$props2","chanceLightStartsOn","Array","Math","random","_this2","concat","src_Cell_0","key","genCells","winMessage","Fragment","href","React","defaultProps","App","src_Board_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0QAuBeA,oNAlBbC,YAAc,SAAAC,GACZC,EAAKC,MAAMC,kBAAkBF,EAAKC,MAAME,gFAIxC,IAAIC,EAAU,OAMd,OAJIC,KAAKJ,MAAMK,QACbF,GAAW,aAITG,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,EAASO,QAASN,KAAKP,qBAd5Bc,cC4BbC,oNAEJC,MAAQ,CAACC,MAAOf,EAAKgB,cAAeC,QAAQ,KAsB5CC,gBAAkB,SAAAf,GAAS,IAAAgB,EACJnB,EAAKC,MAArBmB,EADoBD,EACpBC,MAAOC,EADaF,EACbE,MADaC,EAEHtB,EAAKc,MAAtBC,EAFoBO,EAEpBP,MAAOE,EAFaK,EAEbL,OAFaM,EAGZpB,EAAMqB,MAAM,KAAKC,IAAIC,QAHTC,EAAAC,OAAAC,EAAA,EAAAD,CAAAL,EAAA,GAGpBO,EAHoBH,EAAA,GAGjBI,EAHiBJ,EAAA,GAKR,CACf,CAACG,EAAGC,GACJ,CAACD,EAAI,EAAGC,GACR,CAACD,EAAI,EAAGC,GACR,CAACD,EAAGC,EAAI,GACR,CAACD,EAAGC,EAAI,IAGCC,QAAQ,SAAAC,GAAY,IAAAC,EAAAN,OAAAC,EAAA,EAAAD,CAAAK,EAAA,GAAVH,EAAUI,EAAA,GAAPH,EAAOG,EAAA,GACTH,GAAK,GAAKA,EAAIX,GAASU,GAAK,GAAKA,EAAIT,IACzCN,EAAMe,GAAGC,IAAMhB,EAAMe,GAAGC,MAG1Cd,EAASF,EAAMoB,MAAM,SAAAC,GAAG,OAAIA,EAAID,MAAM,SAAAE,GAAI,OAAKA,MAE/CrC,EAAKsC,SAAS,CAACvB,QAAOE,yFAhCtB,IALY,IAAAsB,EAC8BlC,KAAKJ,MAA1CmB,EADOmB,EACPnB,MAAOC,EADAkB,EACAlB,MAAOmB,EADPD,EACOC,oBAEfzB,EAAQ0B,MAAMpB,GAETS,EAAI,EAAGA,EAAIT,EAAOS,IAAK,CAC9Bf,EAAMe,GAAKW,MAAMrB,GAEjB,IAAK,IAAIW,EAAI,EAAGA,EAAIX,EAAOW,IACzBhB,EAAMe,GAAGC,GAAMW,KAAKC,SAAWH,EAInC,OAAOzB,qCA2BE,IAAA6B,EAAAvC,KACT,OAAOA,KAAKS,MAAMC,MAAMU,IAAI,SAACW,EAAKN,GAAN,OACxBM,EAAIX,IAAI,SAACY,EAAMN,GACb,IAAM5B,EAAK,GAAA0C,OAAIf,EAAJ,KAAAe,OAASd,GACpB,OACExB,EAAAC,EAAAC,cAACqC,EAAD,CACEC,IAAK5C,EACLG,MAAO+B,EACPnC,kBAAmB0C,EAAK1B,gBACxBf,MAAOA,yCAWjB,IAAMY,EAAQR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACVL,KAAK2C,YAGlBC,EAAa1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,OACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,QAGrB,OACEH,EAAAC,EAAAC,cAAAF,EAAAC,EAAA0C,SAAA,KACG7C,KAAKS,MAAMG,OACVgC,EACAlC,EAGFR,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,KAAG0C,KAAK,4DAAR,kBApFUC,IAAMxC,YAApBC,EAIGwC,aAAe,CAACjC,MAAO,EAAGC,MAAO,EAAGmB,oBAAqB,KAwFnD3B,QC3GAyC,0LARX,OACE/C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC8C,EAAD,cAJU3C,cCME4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.98c82f02.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\nclass Cell extends Component {\n\n  handleClick = evt => {\n    this.props.flipCellsAroundMe(this.props.coord);\n  }\n\n  render() {\n    let classes = \"Cell\";\n\n    if (this.props.isLit) {\n      classes += \" Cell-lit\";\n    }\n\n    return (\n        <div className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends React.Component {\n\n  state = {board: this.createBoard(), hasWon: false}\n\n  static defaultProps = {ncols: 5, nrows: 5, chanceLightStartsOn: 0.25}\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  createBoard() {\n    let {ncols, nrows, chanceLightStartsOn} = this.props;\n    \n    let board = Array(nrows);\n\n    for (let y = 0; y < nrows; y++) {\n      board[y] = Array(ncols);\n\n      for (let x = 0; x < ncols; x++) {\n        board[y][x] = (Math.random() < chanceLightStartsOn);\n      }\n    }\n    \n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n  flipCellsAround = coord => {\n    let {ncols, nrows} = this.props;\n    let {board, hasWon} = this.state;\n    let [y, x] = coord.split(\"-\").map(Number);\n    \n    let flipCoords = [\n      [y, x], \n      [y + 1, x], \n      [y - 1, x], \n      [y, x + 1], \n      [y, x - 1], \n    ];\n\n    flipCoords.forEach(([y, x]) => {\n       const isOnBoard = (x >= 0 && x < ncols && y >= 0 && y < nrows);\n       if (isOnBoard) board[y][x] = !board[y][x];\n    });\n    \n    hasWon = board.every(row => row.every(cell => !cell));\n\n    this.setState({board, hasWon});\n  }\n\n  genCells() {\n    return this.state.board.map((row, y) => (\n        row.map((cell, x) => {\n          const coord=`${y}-${x}`;\n          return (\n            <Cell \n              key={coord} \n              isLit={cell} \n              flipCellsAroundMe={this.flipCellsAround} \n              coord={coord} \n            />)\n        })\n    ));\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    const board = <div className=\"board\">\n                      {this.genCells()}\n                  </div>;\n\n    const winMessage = <div className=\"win-message\">\n                         <span className=\"neon\">You</span>\n                         <span className=\"flux\">Won</span>\n                       </div>;\n\n    return (\n      <>\n        {this.state.hasWon \n        ? winMessage\n        : board\n        }\n        \n        <div className=\"rules\">\n          <a href=\"https://en.wikipedia.org/wiki/Lights_Out_(game)#Gameplay\">Rules</a>\n        </div>\n      </>\n    );\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}